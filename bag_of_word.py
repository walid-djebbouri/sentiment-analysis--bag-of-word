# -*- coding: utf-8 -*-
"""bag_of_word.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tm6suHrNnKPS0-al-mrb2nkZoXpBtK2s
"""

import nltk
nltk.download('stopwords')
# importing pandas package
import heapq
import pandas as pd
import re
import math as ma
import numpy as np
from nltk.corpus import stopwords
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sys import getsizeof

data = pd.read_csv("commentaire.csv" , error_bad_lines=False   )

stopwords_list = stopwords.words('arabic')

les_mot = {}

target = np.zeros((len(data)) , dtype='i')

for i , commantaire in data.iterrows() :

    chaine_caractere = commantaire.to_string()
    if "pos" in chaine_caractere:
        target[i] = 1
    mots_Commentaire = re.findall(r'[أ-ي]+', chaine_caractere)
    mots_no_stop = []
    for mo in mots_Commentaire:
        if mo not in  stopwords_list  and mo not in  les_mot :
            les_mot[mo] = mo

print(len(les_mot))

freq_words = heapq.nlargest(10000, les_mot, key=les_mot.get)

X = []

for i , commantaire in data.iterrows() :
    vector = []
    chaine_caractere = commantaire.to_string()
    mots_Commentaire = re.findall(r'[أ-ي]+', chaine_caractere)
    for word in freq_words:
        if word in mots_Commentaire :
            vector.append(1)
        else:
            vector.append(0)
    X.append(vector)


print("la matrice X est construite")
data_test = train_test_split(X, target
                                 , random_state=0
                                 , train_size=0.9)

data_train, data_test, target_train, target_test = data_test

print("svm est commencée")

clf = svm.SVC()

clf.fit(data_train, target_train)

result = clf.predict(data_test)

print(accuracy_score(result, target_test))